A pasta engine tem as seguintes pastas:

/data: onde ficam os meshes e texturas
/docs: onde ficam a documentacao
/libs: as libs que estao sendo utilizadas (so a tinyxml a newton esta la mas nao eh usada)
/src: o codigo
/src/modules: codigo necessario pra rodar a engine.
/src/util: classes e fun?oes auxiliares utilizadas pos outros modules ou util

Lista de Modulos:

A engine tem que fazer 3 coisas:
- gerenciar os dados lidos como texturas, modelos, etc
- gerenciar a cena a ser renderizada
- gerenciar a chamada das funcoes na ordem certa

O 1 eh feito com a ajuda de varios "manegers". quando um arquivo eh carregado ele so
eh carregado uma vez. por exemplo nas texturas eh associado em um map o nome da textura
com a instancia dela. dessa forma se nao tiver o nome da textura no map ela sera
carregada, caso ja tenha retorna a instancia do objeto. assim se for carregado duas texturas
com mesmo nome apenas a primeira eh lida do hd e instanciada, a segunda eh um ponteiro pra
essa textura. os modelos tambem sao assim, talvez os shaders e os material deveriam ser tbm.
Apesar deles possuirem a mesma "data" eles possuem informacoes logicas diferentes, por
exemplo, se voce carrega dois modelos iguais, com texturas iguais, mas os coloca em posicoes
diferentes, teremos so 1 modelo e textura na memoria mas dois meshes com estado diferente.

o 2 eh feito utilizando uma octree para definir o quais geometrias estao no frustum.
porem essa implementação esta incompleta no sentido de que:
1- tem-se apenas o terreno na octree os meshes esntao numa lista. eles tem q ser 
colocados na octree
2- esse é apenas frustum culling, tentei implementar occlusion culling com occlusion
queries como tem no gpu gems 2 mas ficou mais lento :/
3- tem que ser feito alguma especia de light occlusion em breve

o 3 eh o mais simples, a engine funciona seguindo a logica apresentada no Engenuity,
existe um kernel que eh o mainloop da engine e ele tem varias tasks e fica executando elas
em cada frame. as tasks sao coisas que precisam executar a todo frame, como por exemplo
o renderer, o timer, o sistema de eventos, etc

Descricao das classes:

Algumas coisas estao meio padronizadas, algumas classes possuem metodos bind(), unbind()
e initialize() como shaders, materials, texturas, etc. 

As mais importantes sao:

events: existem alguns eventos que sao enviados por algumas classes para se comunicarem
com outras classes, por exemplo quando o input detecta que apertou a tecla seta pra cima
esse evento eh enviado para a camera fazer o movimento. para uma classe poder ouvir e
enviar eventos ela precisa herdar da interface EventHandler, a partir dai eh so implementar
o metodo handleEvent() para tratar os eventos que a classe receber.

material: aqui existe a interface Material, na qual todos os outros materials herdam. na
pasta materials tem alguns exemplos prontos (so 2, um do terreno e um so com textura).
pra fazer um novo material eh so herdar de Material e implementar os metodos initialize(),
bind() e unbind() e adicionar o material no MaterialFactory. O metodo initialize() recebe
uma string que seria o xml que descreve as caracteristicas do material.
Alem disso essa pasta possui a pasta textures, com o TextureManager, para utiliza-lo eh simples
pois ele eh um singleton e basta escrever: TEXTUREMANAGER::getInstance().load(); e passar
os parametros corretos no metodo load.

mesh: aqui tem a classe mesh, ele possui dois atributos, o meshdata e o meshrenderer. A ideia
por tras disso eh que se crie diversos meshdatas e diversosmeshrenderes, por exemplo, para
ler um arquivo .nd2 cria-se um meshdata, para ler um .3ds cria-se outro. e os meshrenderes
sao responsaveis por renderizar esses modelos lidos, pode ter um meshrenderer que utilize
vbo ou que utilize displaylist ou vertexarray, etc 
a classe Mesh tem dois metodos mto importantes, o draw() e o update(). o update recebe o
tempo que passou entre um frame e outro e deve atualizar a fisica do mesh, se ele estiver
em movimento, é calculado para onde ele se move e coisa do tipo. a fisica nao esta implementada
mas quandpo for a ideia eh que ela deve ser calculada no metodo update
existem outras classes aqui como o skybox e skudome e terreno.

renderer: na pasta renderer possui as classes: camera que serve pra posicionar a camera (duh)
frustum, que eh usado no frustum culling
video que inicializa a janela e o opengl usando SDL.
e o Renderer, que possui 2 metodos importantes:
start() onde ele le o xml com as configuracoes da "cena" como meshes, luzes, materials e
carrega tudo nas estruturas de dados.
e update() que ele faz:
ativa as luzes, percorre a lista de meshes e chama o metodo update() do mesh e depois
o metodo draw() do mesh. depois disso ele desenha o terreno na octree.
o que deve ser feito no futuro eh colocar os meshes na octree tbm e renderizar so a octree
de uma vez. tambem pode ser necessario mudar a maneira que eh renderizado, por exemplo
ao inves de ser:
ativa luzes
  para cada mesh
    desenha o mesh
    
pode ser necessario ser assim:
para cada luz
	para cada objeto
		desenha objeto

sempre que uma nova funcionalidade for adicionada na engine, o renderer deve ser
capaz de ler o xml e "entende-la" entao seria necessario sempre atualizar o metodo
start() do renderer, ou no futuro caso ele fique muito grande, criar uma classe
so para ler o xml e escrever nas estruturas de dados do renderer a cena.

shaders: possui duas pastas glslshaders e cgshaders. sao simples de usar, basta herdar
da interface GlslShader ou CgShader e implementar os metodos virtuais.

na pasta util tem algumas funcoes auxiliares, as mais uteis sao: glhelper onde tem alguns
wrapers pra alguns comandos do opengl, math onde tem algumas classes pra vec e mat, meshio
que tem as classes que leem os modelos e escrevem nos meshdata e structures onde ta o codigo
da octree.