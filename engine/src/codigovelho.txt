#include "engine.h"
#include "modules/events/input/sdlinputcore.h"
#include "util/meshio/obj/objload.h"
#include "util/meshio/md2/md2IO.h"
#include "modules/textures/texture.h"
#include "modules/textures/texturemanager.h"
#include "modules/math/algebra.h"
#include "modules/shaders/pixelLightShader.h"
#include "modules/material/basicLightMaterial.h"

#include "modules/terrain/heightmap.h"

#include <iostream>
#include <GL/gl.h>
#include <GL/glu.h>
#define FRAMEDELAY 50
unsigned int nverts = 0;
unsigned int nindices = 0;
unsigned int *indices = NULL;
float *vertexdata = NULL;
float *normaldata = NULL;
float *tangendata = NULL;
float *binormdata = NULL;
float *texcoords = NULL;

GLfloat LightAmbient[]= { 1.0f, 1.0f, 1.0f, 1.0f }; 	
GLfloat LightDiffuse[]= { 1.0f, 1.0f, 1.0f, 1.0f };	
GLfloat LightPosition[]= { 0.0f, -200.0f, -200.0f, 1.0f };

basicLightMaterial *mat = new basicLightMaterial();

MD2Obj Obj; // Our object class
  //GLuint Texture[TEXTURECOUNT]; // Texture store 
 
  float ViewRotate=0.0f; // A few vars to handle view rotation, animation and time base values
  long Time1,Time2,Ticks,NextFrame;
  int Frames,CurFrame=0;
 
  char Text[256]; // General purpose string
 
  GLfloat Ambient[]  = { 0.1f,  0.1f,  0.1f, 1.0f};  // Ambient light value
  GLfloat Diffuse[]  = { 1.0f,  1.0f,  1.0f, 1.0f};  // Diffuse light value
  GLfloat Position[] = {10.0f, 60.0f, 10.0f, 1.0f};  // Light position
 
  // Allocate all textures in one go
  //glGenTextures(32,Texture);
 
  // Load our Object
  int RunLevel;
heightmap *map;
int list;

//md2IO *model;
engine::engine(){ 
	done = false;
}

engine::~engine(){
}

void cgErrorCallback(void)
{
    CGerror LastError = cgGetError();

    if(LastError)
    {
        const char *Listing = cgGetLastListing((mat->shader)->getContext());
        printf("\n---------------------------------------------------\n");
        printf("%s\n\n", cgGetErrorString(LastError));
        printf("%s\n", Listing);
        printf("---------------------------------------------------\n");
        printf("Cg error, exiting...\n");
    }
}

texture *tex;
	
bool engine::initialize(){

	std::cout << "Inicializando Engine..." << std::endl;

	video = (videoSystem*)VideoFactory::getInstance().create("sdlvideo");
	if (!video->initialize( videoSystem::RES_800x600 | videoSystem::BPP_8 | videoSystem::OPENGL ))
		return false;
	video->setWindowTitle("Engine");
    video->showCursor(false);

	//precisa informar o tamanho da janela pro inpurCore calcular o quanto o mouse deslocou-se
	INPUT::getInstance().informWindowSize(video->getWidth(), video->getHeight());
	INPUT::getInstance().setMouseVelocity(10.0);
	
   // c = new camera();
	Camera::getInstance().initialize();
 //   t = new timer();
    
    std::cout << "Engine inicializada com sucesso!" << std::endl;  
    
    LoadObjModel("salinha.obj",nverts,nindices,indices,vertexdata,normaldata,tangendata,binormdata,texcoords);
    
    for(int i = 0; i < nindices; i++)
    		std::cout << indices[i] << std::endl;
    
//    glLightfv(GL_LIGHT1, GL_AMBIENT, LightAmbient);
 //   glLightfv(GL_LIGHT1, GL_DIFFUSE, LightDiffuse);
 //   glLightfv(GL_LIGHT1, GL_POSITION,LightPosition);
 //   glEnable(GL_LIGHT1);
//    model = new 	md2IO();
 //   model->ReadFile("Tris.MD2");
 //  tex = TextureManager::getInstance().load("ogro2.tga", texture::TEXTURE_2D, texture::CLAMP | texture::RGB | texture::LINEAR_MIPMAP_LINEAR);
//	tex = TextureManager::getInstance().load("rock.tga", texture::TEXTURE_2D, texture::CLAMP | texture::RGB | texture::LINEAR_MIPMAP_LINEAR);  
	cgSetErrorCallback(cgErrorCallback);
//	shader->initialize("perpixellightv.cg" ,  PROFILE_ARBVP1, "perpixellightf.cg",  PROFILE_ARBFP1); 
//	shader->setInitialParameters();
	mat->initialize("teste");
	  Time1=Time2=clock();
  NextFrame=Time1 + FRAMEDELAY;
	 Obj.Load("WalkMech.md2");
	 
	 map = new heightmap("3dtech.tga", 256, 256);
	 map->scale(0, 40);
	 list = map->generateDisplayList(0, 0, 0);
	 
	return true;
	
}

void engine::shutdown(){
	if (video)
		delete video;
}

void engine::draw(){
	video->lock();


//	glLoadIdentity();
//	shader->setLoopParameters();
//	shader->bind();
	mat->bind();
	glCallList(list);
//	glEnable(GL_LIGHTING);
//	glPushMatrix();
	//glRotatef(40.7,1.0f,1.0f,1.0f);	
  //  glVertexPointer(3, GL_FLOAT, 0, vertexdata);
 ///   glNormalPointer(GL_FLOAT, 0, normaldata);
 //   glTexCoordPointer( 2, GL_FLOAT, 0, texcoords );
//    glEnableClientState( GL_VERTEX_ARRAY );
//    glEnableClientState( GL_NORMAL_ARRAY );
//    glEnableClientState( GL_TEXTURE_COORD_ARRAY );
  //  tex->enable();
  //  tex->bind();
  //  glDrawElements(GL_TRIANGLES, nindices, GL_UNSIGNED_INT, indices);
//    model->AnimateModel(0, 100, 0.01);
	//shader->unbind();
//	mat->unbind();
 //   glPopMatrix();
//	glTranslatef(1.5f,0.0f,-70.0f);				// Move Right And Into The Screen
/*tex->enable();
tex->bind();
	glRotatef(70.7,1.0f,1.0f,1.0f);			// Rotate The Cube On X, Y & Z
	glBegin(GL_QUADS);					// Start Drawing The Cube

		glTexCoord2f(0.0f, 0.0f); glVertex3f(-1.0f, -1.0f,  1.0f);	// Bottom Left Of The Texture and Quad
		glTexCoord2f(1.0f, 0.0f); glVertex3f( 1.0f, -1.0f,  1.0f);	// Bottom Right Of The Texture and Quad
		glTexCoord2f(1.0f, 1.0f); glVertex3f( 1.0f,  1.0f,  1.0f);	// Top Right Of The Texture and Quad
		glTexCoord2f(0.0f, 1.0f); glVertex3f(-1.0f,  1.0f,  1.0f);	// Top Left Of The Texture and Quad
		// Back Face
		glTexCoord2f(1.0f, 0.0f); glVertex3f(-1.0f, -1.0f, -1.0f);	// Bottom Right Of The Texture and Quad
		glTexCoord2f(1.0f, 1.0f); glVertex3f(-1.0f,  1.0f, -1.0f);	// Top Right Of The Texture and Quad
		glTexCoord2f(0.0f, 1.0f); glVertex3f( 1.0f,  1.0f, -1.0f);	// Top Left Of The Texture and Quad
		glTexCoord2f(0.0f, 0.0f); glVertex3f( 1.0f, -1.0f, -1.0f);	// Bottom Left Of The Texture and Quad
		// Top Face
		glTexCoord2f(0.0f, 1.0f); glVertex3f(-1.0f,  1.0f, -1.0f);	// Top Left Of The Texture and Quad
		glTexCoord2f(0.0f, 0.0f); glVertex3f(-1.0f,  1.0f,  1.0f);	// Bottom Left Of The Texture and Quad
		glTexCoord2f(1.0f, 0.0f); glVertex3f( 1.0f,  1.0f,  1.0f);	// Bottom Right Of The Texture and Quad
		glTexCoord2f(1.0f, 1.0f); glVertex3f( 1.0f,  1.0f, -1.0f);	// Top Right Of The Texture and Quad
		// Bottom Face
		glTexCoord2f(1.0f, 1.0f); glVertex3f(-1.0f, -1.0f, -1.0f);	// Top Right Of The Texture and Quad
		glTexCoord2f(0.0f, 1.0f); glVertex3f( 1.0f, -1.0f, -1.0f);	// Top Left Of The Texture and Quad
		glTexCoord2f(0.0f, 0.0f); glVertex3f( 1.0f, -1.0f,  1.0f);	// Bottom Left Of The Texture and Quad
		glTexCoord2f(1.0f, 0.0f); glVertex3f(-1.0f, -1.0f,  1.0f);	// Bottom Right Of The Texture and Quad
		// Right face
		glTexCoord2f(1.0f, 0.0f); glVertex3f( 1.0f, -1.0f, -1.0f);	// Bottom Right Of The Texture and Quad
		glTexCoord2f(1.0f, 1.0f); glVertex3f( 1.0f,  1.0f, -1.0f);	// Top Right Of The Texture and Quad
		glTexCoord2f(0.0f, 1.0f); glVertex3f( 1.0f,  1.0f,  1.0f);	// Top Left Of The Texture and Quad
		glTexCoord2f(0.0f, 0.0f); glVertex3f( 1.0f, -1.0f,  1.0f);	// Bottom Left Of The Texture and Quad
		// Left Face
		glTexCoord2f(0.0f, 0.0f); glVertex3f(-1.0f, -1.0f, -1.0f);	// Bottom Left Of The Texture and Quad
		glTexCoord2f(1.0f, 0.0f); glVertex3f(-1.0f, -1.0f,  1.0f);	// Bottom Right Of The Texture and Quad
		glTexCoord2f(1.0f, 1.0f); glVertex3f(-1.0f,  1.0f,  1.0f);	// Top Right Of The Texture and Quad
		glTexCoord2f(0.0f, 1.0f); glVertex3f(-1.0f,  1.0f, -1.0f);	
					

		/*glColor3f(0.0f,1.0f,0.0f);			// Set The Color To Green
		glVertex3f( 10.0f, 10.0f,-10.0f);			// Top Right Of The Quad (Top)
		glVertex3f(-10.0f, 10.0f,-10.0f);			// Top Left Of The Quad (Top)
		glVertex3f(-10.0f, 10.0f, 10.0f);			// Bottom Left Of The Quad (Top)
		glVertex3f( 10.0f, 10.0f, 10.0f);			// Bottom Right Of The Quad (Top)

		

		glColor3f(1.0f,0.5f,0.0f);			// Set The Color To Orange
		glVertex3f( 10.0f,-10.0f, 10.0f);			// Top Right Of The Quad (Bottom)
		glVertex3f(-10.0f,-10.0f, 10.0f);			// Top Left Of The Quad (Bottom)
		glVertex3f(-10.0f,-10.0f,-10.0f);			// Bottom Left Of The Quad (Bottom)
		glVertex3f( 10.0f,-10.0f,-10.0f);			// Bottom Right Of The Quad (Bottom)


		glColor3f(1.0f,0.0f,0.0f);			// Set The Color To Red
		glVertex3f( 10.0f, 10.0f, 10.0f);			// Top Right Of The Quad (Front)
		glVertex3f(-10.0f, 10.0f, 10.0f);			// Top Left Of The Quad (Front)
		glVertex3f(-10.0f,-10.0f, 10.0f);			// Bottom Left Of The Quad (Front)
		glVertex3f( 10.0f,-10.0f, 10.0f);			// Bottom Right Of The Quad (Front)

		

		glColor3f(1.0f,1.0f,0.0f);			// Set The Color To Yellow
		glVertex3f( 10.0f,-10.0f,-10.0f);			// Bottom Left Of The Quad (Back)
		glVertex3f(-10.0f,-10.0f,-10.0f);			// Bottom Right Of The Quad (Back)
		glVertex3f(-10.0f, 10.0f,-10.0f);			// Top Right Of The Quad (Back)
		glVertex3f( 10.0f, 10.0f,-10.0f);			// Top Left Of The Quad (Back)

			

		glColor3f(0.0f,0.0f,1.0f);			// Set The Color To Blue
		glVertex3f(-10.0f, 10.0f, 10.0f);			// Top Right Of The Quad (Left)
		glVertex3f(-10.0f, 10.0f,-10.0f);			// Top Left Of The Quad (Left)
		glVertex3f(-10.0f,-10.0f,-10.0f);			// Bottom Left Of The Quad (Left)
		glVertex3f(-10.0f,-10.0f, 10.0f);			// Bottom Right Of The Quad (Left)


		glColor3f(1.0f,0.0f,1.0f);			// Set The Color To Violet
		glVertex3f( 10.0f, 10.0f,-10.0f);			// Top Right Of The Quad (Right)
		glVertex3f( 10.0f, 10.0f, 10.0f);			// Top Left Of The Quad (Right)
		glVertex3f( 10.0f,-10.0f, 10.0f);			// Bottom Left Of The Quad (Right)
		glVertex3f( 10.0f,-10.0f,-10.0f);			// Bottom Right Of The Quad (Right)
	glEnd();						// Done Drawing The Quad
*/
 
 
  // Find out how many frames we have
 /* Frames=Obj.GetFrameCount();
 
    // Get ticks since last frame
     Time2=clock();
     Ticks=Time2-Time1;
     Time1=Time2;

     vec3 pos = Camera::getInstance().getPosition();
     Obj.Draw(CurFrame);
 
      if(Time1>NextFrame)
       {
        CurFrame++;
        NextFrame=Time1 + FRAMEDELAY;
         
         if(CurFrame>=Frames)
          CurFrame=0;
       }
 */
// glPopMatrix();
     // Show our scene
   //  FlipBuffers();
     // Rotate view for next frame
    // ViewRotate+=(Ticks/50.0f);
   // }
 
 
  // Clean up textures
	video->unlock();
}

void engine::update(){
	//TODO passar o tempo
//	t->update();

	Camera::getInstance().update(0.1/*t->getSPF()*/);
}


void engine::main(){

	while(!done){
		draw();
		INPUT::getInstance().update();
		update();
	}
	
}

void engine::handleEvent(const event &e){

	switch (e.type) {
      case E_APPCLOSE:
        done = true;
        break;
    }
	
	
}
	

int main()
{
	engine eng;
	eng.initialize();
	eng.main();
	eng.shutdown();
	return 0;
}



class engine{
 
public:
	engine();
	~engine();

	bool initialize();
	void shutdown();
	void draw();
	void update();
	void main();
	void handleEvent(const event &e);

private:

	bool done;
	videoSystem *video;
	camera *c;
// timer *t;
};


























#include "camera.h"
#include <cmath>
#include <GL/gl.h>

#include <iostream>

Camera::Camera(){
	initialize();
}

void Camera::initialize(){
	identity(modelview);
    time = 0.0f;	
}

Camera::~Camera(){
}

/* move em x unidades a camera no eixo axis.
 * o processo eh so criar a matriz de translacao com o axis e multiplicar pela modelview
 * matriz de translacao tem o formato:
 * |m0 m4 m8    x|
 * |m1 m5 m9    y|
 * |m2 m6 m10   z|
 * |m3 m7 m11 m15|
 */
void Camera::move(float x, vec3 axis){

	x *= time;
	
	mat4 translation;
	identity(translation);
	axis = (-x)*axis;

	translation[12] = axis.x;
	translation[13] = axis.y;
	translation[14] = axis.z;
	modelview = modelview*translation;
		
}

void Camera::rotate(float angle, vec3 axis){
	
	angle *= time;
	
	quat rotation, rotationConjugate;
	angle = degtorad(angle);
	
	rotation = axisToQuaternion(angle, axis);
	rotationConjugate = conjugate(rotation);
	
	quat quatX(1.0, 0.0, 0.0, 0.0),
	     quatY(0.0, 1.0, 0.0, 0.0),
	     quatZ(0.0, 0.0, 1.0, 0.0);
	
	quatX = rotation * quatX * rotationConjugate;
	quatY = rotation * quatY * rotationConjugate;
	quatZ = rotation * quatZ * rotationConjugate;
	
	mat4 matrix;
	
	identity(matrix);
	
	matrix[0] = quatX.x;
	matrix[4] = quatX.y;
	matrix[8] = quatX.z;
	
	matrix[1] = quatY.x;
	matrix[5] = quatY.y;
	matrix[9] = quatY.z;
	
	matrix[2] = quatZ.x;
	matrix[6] = quatZ.y;
	matrix[10] = quatZ.z;
	
	modelview = modelview * matrix;
	
}

void Camera::update(float time){

	this->time = time;
	glLoadMatrixf(modelview.mat_array);
	
}

vec3 Camera::getPosition(){
	return vec3(modelview[12], modelview[13], modelview[14]);
}

void Camera::handleEvent(const event &e){

	std::cout << "x " << modelview[12] << " y "<< modelview[13] << " z " << modelview[14] << std::endl;
	switch (e.type){
		case E_MOUSE_ROTATE_X: rotate(e.arg1, vec3(0.0, 1.0, 0.0)); break;
		case E_MOUSE_ROTATE_Y: rotate(e.arg1, vec3(1.0, 0.0, 0.0)); break;
		case E_KEY_UP:         move(10.0f, vec3(0.0, 0.0, (-1.0))); break;
	    case E_KEY_DOWN:       move(10.0f, vec3(0.0, 0.0, 1.0)); break;
	    case E_KEY_LEFT:       move(10.0f, vec3((-1.0), 0.0, 0.0)); break;
	    case E_KEY_RIGHT:      move(10.0f, vec3(1.0, 0.0, 0.0)); break;
	}	
	
}




















#ifndef _CAMERA_H_
#define _CAMERA_H_

#include "../../../util/math/algebra.h"
#include "../../events/eventhandler.h"
#include "../../../util/patterns/singleton.h"

/** Nao foi criado interface nem factory para a camera. essa camera atual eh muito simples
 * e usa quaternion, nao faz sentido criar outro modelo de camera (vetorial por exemplo) e criar a
 * factory pra decidir qual deve ser instanciada, ja que quaternion eh a melhor solucao.
 * se um cliente quiser criar efeitos especiais de camera use composicao (de preferencia) ou heranca
 */
 /** TODO rotatearound e positioncamera ?
  */
 
class Camera : public eventHandler {
 	
public:

	Camera();
	~Camera();
	void initialize();
	void rotate(float angle, vec3 axis);
	void move(float x, vec3 axis);
 	void update(float time);
 	
 	vec3 getPosition();
 	
 	void handleEvent(const event &e);
 	
private:

    float velocity, velocityRotate;
	float time;
    mat4 modelview;
 	
};

typedef singleton<Camera> CAMERA;

#endif //_CAMERA_H_



















/*	GLubyte TGAheader[12] = { 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
	GLubyte TGAcmp[12];
	GLubyte header[6];
	GLuint imagesize, temp, bytesPerPixel;
std::cout << "lendo tga" << std::endl;
	FILE *f = fopen (filename, "rb");
	
	if ((f == NULL)
	    || (fread (TGAcmp, 1, sizeof (TGAcmp), f) != sizeof (TGAcmp))
	    || (memcmp (TGAheader, TGAcmp, sizeof (TGAheader)) != 0)
	    || (fread (header, 1, sizeof (header), f) != sizeof (header))){
		fclose (f);
		std::cout << "nao foi possivel ler a textura" << std::endl;
		return false;
	}
	width = header[1] * 256 + header[0];
	height = header[3] * 256 + header[2];
	std::cout << "tamanho " <<width << std::endl;
	bpp = header[4];
	bytesPerPixel = bpp / 8;
	imagesize = width * height * bytesPerPixel;

	if ((width <= 0) || (height <= 0)
	    || ((header[4] != 24) && (header[4] != 32))){
		fclose (f);
		return false;
	}

	imagedata = new GLubyte[imagesize];
	if ((imagedata == NULL)
	    || (fread (imagedata, 1, imagesize, f) != imagesize)){
		delete imagedata;
		fclose (f);
		return false;
	}
	//swap no formato BGR do TGA pra RGB somente se
	//nao for especificado o formato BGR ou BGRA
//	if ( (format != GL_BGR_EXT) && (format != GL_BGRA_EXT) ){
 		for (GLuint i = 0; i < (imagesize); i += bytesPerPixel){
			temp = imagedata[i];	//guarda o valor do B
			imagedata[i] = imagedata[i + 2];	//B recebe o valor do R
			imagedata[i + 2] = temp;	//R recebe o valor de B, ficando RGB
		}
//	}
	fclose (f);
	return true;
	*/
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	 /*  std::cout << "etste" << std::endl;
	SDL_Surface *img = (SDL_Surface*) IMG_Load(filename);
	imagedata = (GLubyte*) img->pixels;
	SDL_SaveBMP( img, "lol.bmp");
	   if ( !imagedata )
   {
      std::cout << "IMG_Load: " << IMG_GetError() << std::endl;
   }
	width = img->w;
	height = img->h;
	//bpp = img->bpp;
*/
/*GLubyte TGAheader[12] = { 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
	GLubyte TGAcmp[12];
	GLubyte header[6];
	GLuint imagesize, temp, bytesPerPixel;
std::cout << "lendo tga" << std::endl;
	FILE *f = fopen (filename, "rb");
	
	if ((f == NULL)
	    || (fread (TGAcmp, 1, sizeof (TGAcmp), f) != sizeof (TGAcmp))
	    || (memcmp (TGAheader, TGAcmp, sizeof (TGAheader)) != 0)
	    || (fread (header, 1, sizeof (header), f) != sizeof (header))){
		fclose (f);
		std::cout << "nao foi possivel ler a textura" << std::endl;
		return false;
	}
	width = header[1] * 256 + header[0];
	height = header[3] * 256 + header[2];
	std::cout << "tamanho " <<width << std::endl;
	bpp = header[4];
	bytesPerPixel = bpp / 8;
	imagesize = width * height * bytesPerPixel;

	if ((width <= 0) || (height <= 0)
	    || ((header[4] != 24) && (header[4] != 32))){
		fclose (f);
		return false;
	}

	imagedata = new GLubyte[imagesize];
	if ((imagedata == NULL)
	    || (fread (imagedata, 1, imagesize, f) != imagesize)){
		delete imagedata;
		fclose (f);
		return false;
	}
	//swap no formato BGR do TGA pra RGB somente se
	//nao for especificado o formato BGR ou BGRA
//	if ( (format != GL_BGR_EXT) && (format != GL_BGRA_EXT) ){
 		for (GLuint i = 0; i < (imagesize); i += bytesPerPixel){
			temp = imagedata[i];	//guarda o valor do B
			imagedata[i] = imagedata[i + 2];	//B recebe o valor do R
			imagedata[i + 2] = temp;	//R recebe o valor de B, ficando RGB
		}
//	}
	fclose (f);
	return true;*/